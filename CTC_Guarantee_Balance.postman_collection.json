{
	"info": {
		"_postman_id": "e8a41198-a400-494c-8197-bbea2a7edf0d",
		"name": "CTC_Guarantee_Balance",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01_CTC_GB_Local Environment",
			"item": [
				{
					"name": "CTC_GB_End to End Business Tests",
					"item": [
						{
							"name": "Get Bearer Token",
							"item": [
								{
									"name": "POST Auth Login API Bearer Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 CREATED\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response contains JSON\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody());",
													"});",
													"",
													"pm.test(\"Response Authorization header contains bearer token\", function () {",
													"    pm.expect(pm.response.headers.has('Authorization'));",
													"    const tokenHeaderText = pm.response.headers.get('Authorization');",
													"    pm.expect(tokenHeaderText).to.contain(\"Bearer \");",
													"    const tokenText = tokenHeaderText.replace(\"Bearer \", \"\");",
													"    pm.collectionVariables.set(\"bearerToken\", tokenText);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"bearerToken\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"affinityGroup\": \"Individual\",\n    \"credentialStrength\": \"weak\",\n    \"confidenceLevel\": 50,\n    \"credId\": \"{{$randomAlphaNumeric}}\",\n    \"enrolments\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{authLoginApiBaseUrl}}/government-gateway/session/login",
											"host": [
												"{{authLoginApiBaseUrl}}"
											],
											"path": [
												"government-gateway",
												"session",
												"login"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "CTC_GB_Smoke Tests",
					"item": [
						{
							"name": "Get Bearer Token",
							"item": [
								{
									"name": "POST Auth Login API Bearer Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 CREATED\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response contains JSON\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody());",
													"});",
													"",
													"pm.test(\"Response Authorization header contains bearer token\", function () {",
													"    pm.expect(pm.response.headers.has('Authorization'));",
													"    const tokenHeaderText = pm.response.headers.get('Authorization');",
													"    pm.expect(tokenHeaderText).to.contain(\"Bearer \");",
													"    const tokenText = tokenHeaderText.replace(\"Bearer \", \"\");",
													"    pm.collectionVariables.set(\"bearerToken\", tokenText);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"bearerToken\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"affinityGroup\": \"Individual\",\n    \"credentialStrength\": \"weak\",\n    \"confidenceLevel\": 50,\n    \"credId\": \"{{$randomAlphaNumeric}}\",\n    \"enrolments\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{authLoginApiBaseUrl}}/government-gateway/session/login",
											"host": [
												"{{authLoginApiBaseUrl}}"
											],
											"path": [
												"government-gateway",
												"session",
												"login"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "CTC_GB_Regression Tests",
					"item": [
						{
							"name": "Get Bearer Token",
							"item": [
								{
									"name": "POST Auth Login API Bearer Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 CREATED\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response contains JSON\", function () {",
													"    pm.expect(pm.response.to.have.jsonBody());",
													"});",
													"",
													"pm.test(\"Response Authorization header contains bearer token\", function () {",
													"    pm.expect(pm.response.headers.has('Authorization'));",
													"    const tokenHeaderText = pm.response.headers.get('Authorization');",
													"    pm.expect(tokenHeaderText).to.contain(\"Bearer \");",
													"    const tokenText = tokenHeaderText.replace(\"Bearer \", \"\");",
													"    pm.collectionVariables.set(\"bearerToken\", tokenText);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"bearerToken\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"affinityGroup\": \"Individual\",\n    \"credentialStrength\": \"weak\",\n    \"confidenceLevel\": 50,\n    \"credId\": \"{{$randomAlphaNumeric}}\",\n    \"enrolments\": []\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{authLoginApiBaseUrl}}/government-gateway/session/login",
											"host": [
												"{{authLoginApiBaseUrl}}"
											],
											"path": [
												"government-gateway",
												"session",
												"login"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Synchronous Balance Request(SBR)",
							"item": [
								{
									"name": "TC01_SBR_Success",
									"item": [
										{
											"name": "POST-Request-IE034/CD034A - Valid",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let requests = pm.collectionVariables.get(\"requests\");",
															"",
															"if(!requests || requests.length == 0) {",
															"    requests = [{",
															"\t\"taxIdentifier\": \"12345678996325874\",",
															"\t\"guaranteeReference\": \"12345678901234567891234\",",
															"\t\"accessCode\": \"1234\"",
															"},",
															"{",
															"\t\"taxIdentifier\": \"GB123456789876543\",",
															"\t\"guaranteeReference\": \"20GB0000010000GX\",",
															"\t\"accessCode\": \"ABC1\"",
															"},",
															"{",
															"\t\"taxIdentifier\": \"ABCDFRGTHUYJMKIYH\",",
															"\t\"guaranteeReference\": \"abcvfghjkliuythnmjutred\",",
															"\t\"accessCode\": \"ABCD\"",
															"}",
															"]",
															"}",
															"",
															"var nextrequest = requests.shift();",
															"pm.collectionVariables.set(\"taxIdentifier\",nextrequest.taxIdentifier);",
															"pm.collectionVariables.set(\"guaranteeReference\",nextrequest.guaranteeReference);",
															"pm.collectionVariables.set(\"accessCode\",nextrequest.accessCode);",
															"pm.collectionVariables.set(\"requests\",requests);",
															"",
															"if(requests && requests.length > 0){",
															"    postman.setNextRequest(\"POST-Request-IE034/CD034A - Valid\");",
															"}else{",
															"    postman.setNextRequest(\"POST-Response-IE037/CD037A - Valid\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"response\");",
															"    pm.expect(responseJson.response).to.be.an(\"object\");",
															"    pm.expect(responseJson.response).to.have.property(\"balance\");",
															"    pm.expect(responseJson.response.balance).to.be.a(\"number\");",
															"    pm.expect(responseJson.response).to.have.property(\"currency\");",
															"    pm.expect(responseJson.response.currency).to.be.a(\"string\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-Response-IE037/CD037A - Valid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"response\");",
															"    pm.expect(responseJson.response).to.be.an(\"object\");",
															"    pm.expect(responseJson.response).to.have.property(\"balance\");",
															"    pm.expect(responseJson.response.balance).to.be.a(\"number\");",
															"    pm.expect(responseJson.response).to.have.property(\"currency\");",
															"    pm.expect(responseJson.response.currency).to.be.a(\"string\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let requests = pm.collectionVariables.get(\"requests\");",
															"",
															"if(!requests || requests.length == 0) {",
															"    requests = [{",
															"\t\"taxIdentifier\": \"12345678996325\",",
															"\t\"guaranteeReference\": \"1234567890123456789123\",",
															"\t\"accessCode\": \"1234\"",
															"},",
															"{",
															"\t\"taxIdentifier\": \"GB1234778BB00\",",
															"\t\"guaranteeReference\": \"20GB0000000GX\",",
															"\t\"accessCode\": \"ABC1\"",
															"},",
															"{",
															"\t\"taxIdentifier\": \"ABCDFRGTHUYJMKI\",",
															"\t\"guaranteeReference\": \"abcvfghjkliuythnmjutr\",",
															"\t\"accessCode\": \"ABCD\"",
															"}",
															"]",
															"}",
															"",
															"var nextrequest = requests.shift();",
															"pm.collectionVariables.set(\"taxIdentifier\",nextrequest.taxIdentifier);",
															"pm.collectionVariables.set(\"guaranteeReference\",nextrequest.guaranteeReference);",
															"pm.collectionVariables.set(\"accessCode\",nextrequest.accessCode);",
															"pm.collectionVariables.set(\"requests\",requests);",
															"",
															"if(requests && requests.length > 0){",
															"    postman.setNextRequest(\"POST-Response-IE037/CD037A - Valid\");",
															"}else{",
															"    postman.setNextRequest(\"POST-IE906/CD906A-Functional Error\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearerToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "TC02_SBR_Functional Error",
									"item": [
										{
											"name": "POST-IE906/CD906A-Functional Error",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains errors\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"code\");",
															"    pm.expect(responseJson.code).to.eql(\"FUNCTIONAL_ERROR\");",
															"    pm.expect(responseJson).to.have.property(\"message\");",
															"    pm.expect(responseJson.message).to.eql(\"The request was rejected by the guarantee management system\");",
															"    pm.expect(responseJson).to.have.property(\"response\");",
															"    pm.expect(responseJson.response).to.be.an(\"object\");",
															"    pm.expect(responseJson.response).to.have.property(\"errors\");",
															"    pm.expect(responseJson.response.errors).to.be.an(\"array\");",
															"    pm.expect(responseJson.response.errors).to.not.be.empty;",
															"});",
															"",
															"pm.collectionVariables.unset(\"taxIdentifier\");",
															"pm.collectionVariables.unset(\"guaranteeReference\");",
															"pm.collectionVariables.unset(\"accessCode\");",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function randomString(length, chars) {",
															"    var result = '';",
															"    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];",
															"    return result;",
															"}",
															"var rString = randomString(24, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');",
															"",
															"pm.collectionVariables.set(\"taxIdentifier\", \"GB123456789013\");",
															"pm.collectionVariables.set(\"guaranteeReference\", rString);",
															"pm.collectionVariables.set(\"accessCode\", \"E906\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearerToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "TC03_SBR_XML Error",
									"item": [
										{
											"name": "POST-IE917/CC917A-XML Error",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500 INTERNAL SERVER ERROR\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function () {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains errors\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"message\");",
															"    pm.expect(responseJson.message).to.eql(\"Internal server error\");",
															"    pm.expect(responseJson).to.have.property(\"code\");",
															"    pm.expect(responseJson.code).to.eql(\"INTERNAL_SERVER_ERROR\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"function randomString(length, chars) {",
															"    var result = '';",
															"    for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];",
															"    return result;",
															"}",
															"var gRString = randomString(23, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');",
															"",
															"pm.collectionVariables.set(\"taxIdentifier\", \"GB12345678901312\");",
															"pm.collectionVariables.set(\"guaranteeReference\",gRString);",
															"pm.collectionVariables.set(\"accessCode\", \"E917\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearerToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "TC04_SBR_Invalid_TaxIdetifier",
									"item": [
										{
											"name": "POST-IE034/CD034A-Invalid Taxidnetifier",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 INTERNAL SERVER ERROR\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains errors\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"message\");",
															"    pm.expect(responseJson.message).to.eql(\"Bad request\");",
															"    pm.expect(responseJson).to.have.property(\"errors\");",
															"    pm.expect(responseJson.errors).to.be.an(\"array\");",
															"    pm.expect(responseJson.errors).to.not.be.empty;",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid tax identifier value\");",
															"    console.log(responseJson.errors[0].reason);",
															"});",
															"",
															"//pm.collectionVariables.unset(\"requests\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let requests = pm.collectionVariables.get(\"requests\");",
															"",
															"if(!requests || requests.length == 0) {",
															"    requests = [{",
															"\t\"taxIdentifier\": \"123451234567891011121314\",",
															"\t\"guaranteeReference\": \"20GB000001\",",
															"\t\"accessCode\": \"ABC1\"",
															"},",
															"{",
															"\t\"taxIdentifier\": \"123 % $ % ^ &$%£\",",
															"\t\"guaranteeReference\": \"20GB0000010000GX\",",
															"\t\"accessCode\": \"ABC1\"",
															"},",
															"{",
															"\t\"taxIdentifier\": \"\",",
															"\t\"guaranteeReference\": \"20GB0000010000GX4\",",
															"\t\"accessCode\": \"ABC1\"",
															"}",
															"]",
															"}",
															"",
															"var nextrequest = requests.shift();",
															"pm.collectionVariables.set(\"taxIdentifier\",nextrequest.taxIdentifier);",
															"pm.collectionVariables.set(\"guaranteeReference\",nextrequest.guaranteeReference);",
															"pm.collectionVariables.set(\"accessCode\",nextrequest.accessCode);",
															"pm.collectionVariables.set(\"requests\",requests);",
															"",
															"if(requests && requests.length > 0){",
															"    postman.setNextRequest(\"POST-IE034/CD034A-Invalid Taxidnetifier\");",
															"}else{",
															"    postman.setNextRequest(\"POST-IE034/CD034A-No Taxidentifier\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-IE034/CD034A-No Taxidentifier",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let TC04_requests = pm.collectionVariables.get(\"TC04_requests\");",
															"",
															"if(!TC04_requests || TC04_requests.length == 0) {",
															"    TC04_requests = [{",
															"\t\"guaranteeReference\": \"12345678901234567891234\",",
															"\t\"accessCode\": \"1234\"",
															"}",
															"]",
															"}",
															"",
															"var nextrequest = TC04_requests.shift();",
															"pm.collectionVariables.set(\"req_body\",JSON.stringify(nextrequest));",
															"pm.collectionVariables.set(\"TC04_requests\",TC04_requests);",
															"",
															"if(TC04_requests && TC04_requests.length > 0){",
															"    postman.setNextRequest(\"POST-IE034/CD034A-No Taxidentifier\");",
															"}else{",
															"    postman.setNextRequest(\"POST-IE034/CD034A-Pasing Json\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 OK\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"code\");",
															"    pm.expect(responseJson.code).to.eql(\"INVALID_REQUEST_JSON\");",
															"    console.log(responseJson.message);",
															"    pm.expect(responseJson).to.have.property(\"errors\");",
															"    pm.expect(responseJson.errors).to.be.an(\"object\");",
															"    pm.expect(responseJson.errors).to.have.property(\"$.taxIdentifier\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{req_body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-IE034/CD034A-Pasing Json",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 OK\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"code\");",
															"    pm.expect(responseJson.code).to.eql(\"INVALID_REQUEST_JSON\");",
															"    console.log(responseJson.message);",
															"    pm.expect(responseJson).to.have.property(\"errors\");",
															"    pm.expect(responseJson.errors).to.be.an(\"object\");",
															"    pm.expect(responseJson.errors).to.have.property(\"$.taxIdentifier\");",
															"    //console.log(responseJson.$.taxIdentifier[0]);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let TC4_requests = pm.collectionVariables.get(\"TC4_requests\");",
															"",
															"if(!TC4_requests || TC4_requests.length == 0) {",
															"    TC4_requests = [{",
															"    \"taxIdentifier\": {\"number\": 1},",
															"\t\"guaranteeReference\": \"12345678901234567891234\",",
															"\t\"accessCode\": \"1234\"",
															"}",
															"]",
															"}",
															"",
															"var nextrequest = TC4_requests.shift();",
															"pm.collectionVariables.set(\"req_body\",JSON.stringify(nextrequest));",
															"pm.collectionVariables.set(\"TC4_requests\",TC4_requests);",
															"",
															"if(TC4_requests && TC4_requests.length > 0){",
															"    postman.setNextRequest(\"POST-IE034/CD034A-Pasing Json\");",
															"}else{",
															"    postman.setNextRequest(\"POST-IE034/CD034A-Invalid GuaranteeRef\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{req_body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearerToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "TC05-SBR_Invalid_GuaranteeRef",
									"item": [
										{
											"name": "POST-IE034/CD034A-Invalid GuaranteeRef",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains errors\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"message\");",
															"    pm.expect(responseJson.message).to.eql(\"Bad request\");",
															"    pm.expect(responseJson).to.have.property(\"errors\");",
															"    pm.expect(responseJson.errors).to.be.an(\"array\");",
															"    pm.expect(responseJson.errors).to.not.be.empty;",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid guarantee reference value\");",
															"    console.log(responseJson.errors[0].reason);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let requests = pm.collectionVariables.get(\"requests\");",
															"",
															"if(!requests || requests.length == 0) {",
															"    requests = [{",
															"\t\"taxIdentifier\": \"1234567891\",",
															"\t\"guaranteeReference\": \"20780000010000GX412345677\",",
															"\t\"accessCode\": \"ABC1\"",
															"},",
															"{",
															"\t\"taxIdentifier\": \"GB123456789876543\",",
															"\t\"guaranteeReference\": \"ABC@£$$%%^&*\",",
															"\t\"accessCode\": \"ABC1\"",
															"},",
															"{",
															"\t\"taxIdentifier\": \"ABCDFRGTHUYJMKIYH\",",
															"\t\"guaranteeReference\": \"\",",
															"\t\"accessCode\": \"ABC1\"",
															"}",
															"]",
															"}",
															"",
															"var nextrequest = requests.shift();",
															"pm.collectionVariables.set(\"taxIdentifier\",nextrequest.taxIdentifier);",
															"pm.collectionVariables.set(\"guaranteeReference\",nextrequest.guaranteeReference);",
															"pm.collectionVariables.set(\"accessCode\",nextrequest.accessCode);",
															"pm.collectionVariables.set(\"requests\",requests);",
															"",
															"if(requests && requests.length > 0){",
															"    postman.setNextRequest(\"POST-IE034/CD034A-Invalid GuaranteeRef\");",
															"}else{",
															"    postman.setNextRequest(\"POST-IE034/CD034A-No GuaranteeRef\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-IE034/CD034A-No GuaranteeRef",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let TC05_requests = pm.collectionVariables.get(\"TC05_requests\");",
															"",
															"if(!TC05_requests || TC05_requests.length == 0) {",
															"    TC05_requests = [{",
															"",
															"\t\"taxIdentifier\": \"ABCDFRGTHUYJMKIYH\",",
															"    \"accessCode\": \"ABCD\"",
															"\t",
															"}",
															"]",
															"}",
															"",
															"var nextrequest = TC05_requests.shift();",
															"pm.collectionVariables.set(\"req_body\",JSON.stringify(nextrequest));",
															"pm.collectionVariables.set(\"TC05_requests\",TC05_requests);",
															"",
															"if(TC05_requests && TC05_requests.length > 0){",
															"    postman.setNextRequest(\"POST-IE034/CD034A-No GuaranteeRef\");",
															"}else{",
															"    postman.setNextRequest(\"POST-IE034/CD034A-Pasing Null\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 OK\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"code\");",
															"    pm.expect(responseJson.code).to.eql(\"INVALID_REQUEST_JSON\");",
															"    console.log(responseJson.message);",
															"    pm.expect(responseJson).to.have.property(\"errors\");",
															"    pm.expect(responseJson.errors).to.be.an(\"object\");",
															"    pm.expect(responseJson.errors).to.have.property(\"$.guaranteeReference\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{req_body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-IE034/CD034A-Pasing Null",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 OK\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"code\");",
															"    pm.expect(responseJson.code).to.eql(\"INVALID_REQUEST_JSON\");",
															"    console.log(responseJson.message);",
															"    pm.expect(responseJson).to.have.property(\"errors\");",
															"    pm.expect(responseJson.errors).to.be.an(\"object\");",
															"    pm.expect(responseJson.errors).to.have.property(\"$.guaranteeReference\");",
															"    //console.log(responseJson.$.taxIdentifier[0]);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let TC5_requests = pm.collectionVariables.get(\"TC5_requests\");",
															"",
															"if(!TC5_requests || TC5_requests.length == 0) {",
															"    TC5_requests = [{",
															"    \"taxIdentifier\":\"GBX456700B\",",
															"\t\"guaranteeReference\": null,",
															"\t\"accessCode\": \"GB12\"",
															"}",
															"]",
															"}",
															"",
															"var nextrequest = TC5_requests.shift();",
															"pm.collectionVariables.set(\"req_body\",JSON.stringify(nextrequest));",
															"pm.collectionVariables.set(\"TC5_requests\",TC5_requests);",
															"",
															"if(TC5_requests && TC5_requests.length > 0){",
															"    postman.setNextRequest(\"POST-IE034/CD034A-Pasing Null\");",
															"}else{",
															"    postman.setNextRequest(\"POST-IE034/CD034A-Invalid AccessCode\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{req_body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearerToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "TC06-SBR_Invalid_AccessCode",
									"item": [
										{
											"name": "POST-IE034/CD034A-Invalid AccessCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let requests = pm.collectionVariables.get(\"requests\");",
															"",
															"if(!requests || requests.length == 0) {",
															"    requests = [{",
															"\t\"taxIdentifier\": \"1234567891\",",
															"\t\"guaranteeReference\": \"123456789012345678912345\",",
															"\t\"accessCode\": \"12345\"",
															"},",
															"{",
															"\t\"taxIdentifier\": \"GB123456789876543\",",
															"\t\"guaranteeReference\": \"20GB0000010000GX\",",
															"\t\"accessCode\": \"£$%^\"",
															"},",
															"{",
															"\t\"taxIdentifier\": \"ABCDFRGTHUYJMKIYH\",",
															"\t\"guaranteeReference\": \"abcvfghjkliuythnmjutred\",",
															"\t\"accessCode\": \"\"",
															"}",
															"]",
															"}",
															"",
															"var nextrequest = requests.shift();",
															"pm.collectionVariables.set(\"taxIdentifier\",nextrequest.taxIdentifier);",
															"pm.collectionVariables.set(\"guaranteeReference\",nextrequest.guaranteeReference);",
															"pm.collectionVariables.set(\"accessCode\",nextrequest.accessCode);",
															"pm.collectionVariables.set(\"requests\",requests);",
															"",
															"if(requests && requests.length > 0){",
															"    postman.setNextRequest(\"POST-IE034/CD034A-Invalid AccessCode\");",
															"}else{",
															"    postman.setNextRequest(\"POST-IE034/CD034A-No AccessCode\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 BAD REQUEST\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains errors\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"message\");",
															"    pm.expect(responseJson.message).to.eql(\"Bad request\");",
															"    pm.expect(responseJson).to.have.property(\"errors\");",
															"    pm.expect(responseJson.errors).to.be.an(\"array\");",
															"    pm.expect(responseJson.errors).to.not.be.empty;",
															"    pm.expect(responseJson.errors[0].message).to.eql(\"Invalid access code value\");",
															"    console.log(responseJson.errors[0].reason);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-IE034/CD034A-No AccessCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let TC06_requests = pm.collectionVariables.get(\"TC06_requests\");",
															"",
															"if(!TC06_requests || TC06_requests.length == 0) {",
															"    TC06_requests = [{",
															"",
															"\t\"taxIdentifier\": \"ABCDFRGTHUYJMKIYH\",",
															"\t\"guaranteeReference\": \"abcvfghjkliuythnmjutred\",",
															"\t",
															"}",
															"]",
															"}",
															"",
															"var nextrequest = TC06_requests.shift();",
															"pm.collectionVariables.set(\"req_body\",JSON.stringify(nextrequest));",
															"pm.collectionVariables.set(\"TC06_requests\",TC06_requests);",
															"",
															"if(TC06_requests && TC06_requests.length > 0){",
															"    postman.setNextRequest(\"POST-IE034/CD034A-No AccessCode\");",
															"}else{",
															"    postman.setNextRequest(\"POST-IE034/CD034A-Pasing Array\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 OK\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"code\");",
															"    pm.expect(responseJson.code).to.eql(\"INVALID_REQUEST_JSON\");",
															"    console.log(responseJson.message);",
															"    pm.expect(responseJson).to.have.property(\"errors\");",
															"    pm.expect(responseJson.errors).to.be.an(\"object\");",
															"    pm.expect(responseJson.errors).to.have.property(\"$.accessCode\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{req_body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-IE034/CD034A-Pasing Array",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400 OK\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"code\");",
															"    pm.expect(responseJson.code).to.eql(\"INVALID_REQUEST_JSON\");",
															"    console.log(responseJson.message);",
															"    pm.expect(responseJson).to.have.property(\"errors\");",
															"    pm.expect(responseJson.errors).to.be.an(\"object\");",
															"    pm.expect(responseJson.errors).to.have.property(\"$.accessCode\");",
															"    //console.log(responseJson.$.taxIdentifier[0]);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let TC6_requests = pm.collectionVariables.get(\"TC6_requests\");",
															"",
															"if(!TC6_requests || TC6_requests.length == 0) {",
															"    TC6_requests = [{",
															"    \"taxIdentifier\":\"GBX456700B\",",
															"\t\"guaranteeReference\": \"GBX456700BBGTG34\",",
															"\t\"accessCode\": [\"GB12\"]",
															"}",
															"]",
															"}",
															"",
															"var nextrequest = TC6_requests.shift();",
															"pm.collectionVariables.set(\"req_body\",JSON.stringify(nextrequest));",
															"pm.collectionVariables.set(\"TC6_requests\",TC6_requests);",
															"",
															"if(TC6_requests && TC6_requests.length > 0){",
															"    postman.setNextRequest(\"POST-IE034/CD034A-Pasing Array\");",
															"}else{",
															"    postman.setNextRequest(\"POST-E034/CD034A-Valid\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{req_body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearerToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Asynchronous Balance Request(ABR)",
							"item": [
								{
									"name": "TC01-ABR_Success",
									"item": [
										{
											"name": "POST-E034/CD034A-Valid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 202 ACCEPTED\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance ID\", function () {",
															"    const uuidRegex = /^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$/;",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"balanceId\");",
															"    pm.expect(responseJson.balanceId).to.match(uuidRegex);",
															"    pm.collectionVariables.set(\"balanceId\", responseJson.balanceId);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"taxIdentifier\", \"GB123456789015\");",
															"pm.collectionVariables.set(\"guaranteeReference\", \"20GB0000010000GX5\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"T000\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET-E034/CD034A Before Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance ID without response\", function () {",
															"    const uuidRegex = /^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$/;",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"request\");",
															"    pm.expect(responseJson.request).to.have.property(\"balanceId\");",
															"    pm.expect(responseJson.request.balanceId).to.match(uuidRegex);",
															"    pm.expect(responseJson.request).not.to.have.property(\"response\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"T000\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances/{{balanceId}}",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances",
														"{{balanceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST Trigger Successful Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"response\": {\n        \"status\": \"SUCCESS\",\n        \"balance\": 12345678.9,\n        \"currency\": \"EUR\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{testSupportBaseUrl}}/balances/{{balanceId}}",
													"host": [
														"{{testSupportBaseUrl}}"
													],
													"path": [
														"balances",
														"{{balanceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Guarantee Balance Request After Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"request\");",
															"    pm.expect(responseJson.request).to.have.property(\"response\");",
															"    pm.expect(responseJson.request.response).to.be.an(\"object\");",
															"    pm.expect(responseJson.request.response).to.have.property(\"balance\");",
															"    pm.expect(responseJson.request.response.balance).to.be.a(\"number\");",
															"    pm.expect(responseJson.request.response).to.have.property(\"currency\");",
															"    pm.expect(responseJson.request.response.currency).to.be.a(\"string\");",
															"    pm.expect(responseJson.request.response.status).to.eql(\"SUCCESS\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"T000\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances/{{balanceId}}",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances",
														"{{balanceId}}"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearerToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "TC02-ABR_Functional Error",
									"item": [
										{
											"name": "POST-IE906/CD906A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 202 ACCEPTED\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance ID\", function () {",
															"    const uuidRegex = /^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$/;",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"balanceId\");",
															"    pm.expect(responseJson.balanceId).to.match(uuidRegex);",
															"    pm.collectionVariables.set(\"balanceId\", responseJson.balanceId);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"taxIdentifier\", \"GB123456789016\");",
															"pm.collectionVariables.set(\"guaranteeReference\", \"20GB0000010000GX6\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"T000\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET-IE906/CD906A Before Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance ID without response\", function () {",
															"    const uuidRegex = /^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$/;",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"request\");",
															"    pm.expect(responseJson.request).to.have.property(\"balanceId\");",
															"    pm.expect(responseJson.request.balanceId).to.match(uuidRegex);",
															"    pm.expect(responseJson.request).not.to.have.property(\"response\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"T000\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances/{{balanceId}}",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances",
														"{{balanceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST Trigger Functional Error Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"response\": {\n        \"status\": \"FUNCTIONAL_ERROR\",\n        \"errors\": [\n            {\n                \"errorType\": 12,\n                \"errorPointer\": \"Foo.Bar(1).Baz\"\n            }\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{testSupportBaseUrl}}/balances/{{balanceId}}",
													"host": [
														"{{testSupportBaseUrl}}"
													],
													"path": [
														"balances",
														"{{balanceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Guarantee Balance Request After Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains errors\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"request\");",
															"    pm.expect(responseJson.request).to.have.property(\"response\");",
															"    pm.expect(responseJson.request.response).to.be.an(\"object\");",
															"    pm.expect(responseJson.request.response).to.have.property(\"status\");",
															"    pm.expect(responseJson.request.response.status).to.eql(\"FUNCTIONAL_ERROR\");",
															"    pm.expect(responseJson.request.response).to.have.property(\"errors\");",
															"    pm.expect(responseJson.request.response.errors).to.be.an(\"array\");",
															"    pm.expect(responseJson.request.response.errors).to.not.be.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"T000\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances/{{balanceId}}",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances",
														"{{balanceId}}"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearerToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "TC03-ABR_XML Error",
									"item": [
										{
											"name": "POST-IE917/CC917A",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 202 ACCEPTED\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance ID\", function () {",
															"    const uuidRegex = /^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$/;",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"balanceId\");",
															"    pm.expect(responseJson.balanceId).to.match(uuidRegex);",
															"    pm.collectionVariables.set(\"balanceId\", responseJson.balanceId);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"taxIdentifier\", \"GB123456789017\");",
															"pm.collectionVariables.set(\"guaranteeReference\", \"20GB0000010000GX7\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"T000\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET-IE917/CC917A Before Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance ID without response\", function () {",
															"    const uuidRegex = /^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$/;",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"request\");",
															"    pm.expect(responseJson.request).to.have.property(\"balanceId\");",
															"    pm.expect(responseJson.request.balanceId).to.match(uuidRegex);",
															"    pm.expect(responseJson.request).not.to.have.property(\"response\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"T000\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances/{{balanceId}}",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances",
														"{{balanceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST Trigger XML Error Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"response\": {\n        \"status\": \"XML_ERROR\",\n        \"errors\": [\n            {\n                \"errorType\": 12,\n                \"errorPointer\": \"Foo.Bar(1).Baz\"\n            }\n        ]\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{testSupportBaseUrl}}/balances/{{balanceId}}",
													"host": [
														"{{testSupportBaseUrl}}"
													],
													"path": [
														"balances",
														"{{balanceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Guarantee Balance Request After Response",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 500 INTERNAL SERVER ERROR\", function () {",
															"    pm.response.to.have.status(500);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains errors\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"code\");",
															"    pm.expect(responseJson.code).to.eql(\"INTERNAL_SERVER_ERROR\");",
															"    pm.expect(responseJson).to.have.property(\"message\");",
															"    pm.expect(responseJson.message).to.eql(\"Internal server error\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"T000\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances/{{balanceId}}",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances",
														"{{balanceId}}"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearerToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Rate Limiting Balance Check Requests",
							"item": [
								{
									"name": "TC01-Rate Limiting-Happy/Unhappy Path",
									"item": [
										{
											"name": "POST-Request-IE034/CD034A-User1 GRN1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let requests = pm.collectionVariables.get(\"requests\");",
															"",
															"if(!requests || requests.length == 0) {",
															"    requests = [{",
															"\t\"taxIdentifier\": \"GB5678456123C\",",
															"\t\"guaranteeReference\": \"GB5678456123CBB\",",
															"\t\"accessCode\": \"1234\"",
															"}",
															"]",
															"}",
															"",
															"let bearer1 = pm.collectionVariables.get(\"bearerToken\");",
															"console.log(\"The bearer token1 is: \" +bearer1);",
															"",
															"var nextrequest = requests.shift();",
															"pm.collectionVariables.set(\"taxIdentifier\",nextrequest.taxIdentifier);",
															"pm.collectionVariables.set(\"guaranteeReference\",nextrequest.guaranteeReference);",
															"pm.collectionVariables.set(\"accessCode\",nextrequest.accessCode);",
															"pm.collectionVariables.set(\"requests\",requests);",
															"",
															"if(requests && requests.length > 0){",
															"    postman.setNextRequest(\"POST-Request-IE034/CD034A-User1 GRN1\");",
															"}else{",
															"    postman.setNextRequest(\"POST-Request-IE034/CD034A-User1 GRN1 58sec Unhappy\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"response\");",
															"    pm.expect(responseJson.response).to.be.an(\"object\");",
															"    pm.expect(responseJson.response).to.have.property(\"balance\");",
															"    console.log(\"The balance of guaranteeref1 is: \" +responseJson.response.balance);",
															"    pm.expect(responseJson.response.balance).to.be.a(\"number\");",
															"    pm.expect(responseJson.response).to.have.property(\"currency\");",
															"    pm.expect(responseJson.response.currency).to.be.a(\"string\");",
															"",
															"    let guaranteeref1 = pm.collectionVariables.get(\"guaranteeReference\");",
															"    console.log(\"GuaranteeRef1 is: \" +guaranteeref1);",
															"    //pm.expect(var1).to.be.equals(var2);",
															"});",
															"",
															"//setTimeout(function(){}, 60000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-Request-IE034/CD034A-User1 GRN1 58sec Unhappy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// as a pre-requisite before running this request make sure that the request 'POST - Request-IE034/CD034A-User1 GRN1' should run from the 'TC01-Rate Limiting-Happy/Unhappy Path' folder.",
															"",
															"let requests = pm.collectionVariables.get(\"requests\");",
															"",
															"if(!requests || requests.length == 0) {",
															"    requests = [{",
															"\t\"taxIdentifier\": \"GB5678456123C\",",
															"\t\"guaranteeReference\": \"GB5678456123CBB\",",
															"\t\"accessCode\": \"1234\"",
															"}",
															"]",
															"}",
															"",
															"let bearer1 = pm.collectionVariables.get(\"bearerToken\");",
															"console.log(\"The bearer token1 is: \" +bearer1);",
															"",
															"setTimeout(function(){}, 58000);",
															"var nextrequest = requests.shift();",
															"pm.collectionVariables.set(\"taxIdentifier\",nextrequest.taxIdentifier);",
															"pm.collectionVariables.set(\"guaranteeReference\",nextrequest.guaranteeReference);",
															"pm.collectionVariables.set(\"accessCode\",nextrequest.accessCode);",
															"pm.collectionVariables.set(\"requests\",requests);",
															"",
															"if(requests && requests.length > 0){",
															"    postman.setNextRequest(\"POST-Request-IE034/CD034A-User1 GRN1 58sec Unhappy\");",
															"}else{",
															"    postman.setNextRequest(\"POST-Request-IE034/CD034A-User1 GRN1 59sec Unhappy\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 429 Too Many Requests\", function () {",
															"    pm.response.to.have.status(429);",
															"    pm.response.to.not.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains too many requests for the same GRN\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"code\");",
															"    pm.expect(responseJson).to.have.property(\"message\");",
															"    console.log(\"The reason is: \" +responseJson.message);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-Request-IE034/CD034A-User1 GRN1 59sec Unhappy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// as a pre-requisite before running this request make sure that the request 'POST - Request-IE034/CD034A-User1 GRN1' should run from the 'TC01-Rate Limiting-Happy/Unhappy Path' folder.",
															"",
															"let requests = pm.collectionVariables.get(\"requests\");",
															"",
															"if(!requests || requests.length == 0) {",
															"    requests = [{",
															"\t\"taxIdentifier\": \"GB5678456123C\",",
															"\t\"guaranteeReference\": \"GB5678456123CBB\",",
															"\t\"accessCode\": \"1234\"",
															"}",
															"]",
															"}",
															"",
															"let bearer1 = pm.collectionVariables.get(\"bearerToken\");",
															"console.log(\"The bearer token1 is: \" +bearer1);",
															"",
															"",
															"setTimeout(function(){}, 1000);",
															"var nextrequest = requests.shift();",
															"pm.collectionVariables.set(\"taxIdentifier\",nextrequest.taxIdentifier);",
															"pm.collectionVariables.set(\"guaranteeReference\",nextrequest.guaranteeReference);",
															"pm.collectionVariables.set(\"accessCode\",nextrequest.accessCode);",
															"pm.collectionVariables.set(\"requests\",requests);",
															"",
															"if(requests && requests.length > 0){",
															"    postman.setNextRequest(\"POST-Request-IE034/CD034A-User1 GRN1 59sec Unhappy\");",
															"}else{",
															"    postman.setNextRequest(\"POST-Request-IE034/CD034A-User1 GRN2\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 429 Too Many Requests\", function () {",
															"    pm.response.to.have.status(429);",
															"    pm.response.to.not.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains too many requests for the same GRN\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"code\");",
															"    pm.expect(responseJson).to.have.property(\"message\");",
															"    console.log(\"The reason is: \" +responseJson.message);",
															"});",
															"    //pm.expect(var1).to.be.equals(var2);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-Request-IE034/CD034A-User1 GRN1 after 60sec",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// as a pre-requisite before running this request make sure that the request 'POST - Request-IE034/CD034A-User1 GRN1' should run from the 'TC01-Rate Limiting-Happy/Unhappy Path' folder.",
															"",
															"let requests = pm.collectionVariables.get(\"requests\");",
															"",
															"if(!requests || requests.length == 0) {",
															"    requests = [{",
															"\t\"taxIdentifier\": \"GB5678456123C\",",
															"\t\"guaranteeReference\": \"GB5678456123CBB\",",
															"\t\"accessCode\": \"1234\"",
															"}",
															"]",
															"}",
															"",
															"let bearer1 = pm.collectionVariables.get(\"bearerToken\");",
															"console.log(\"The bearer token1 is: \" +bearer1);",
															"",
															"",
															"setTimeout(function(){}, 1000);",
															"var nextrequest = requests.shift();",
															"pm.collectionVariables.set(\"taxIdentifier\",nextrequest.taxIdentifier);",
															"pm.collectionVariables.set(\"guaranteeReference\",nextrequest.guaranteeReference);",
															"pm.collectionVariables.set(\"accessCode\",nextrequest.accessCode);",
															"pm.collectionVariables.set(\"requests\",requests);",
															"",
															"if(requests && requests.length > 0){",
															"    postman.setNextRequest(\"POST-Request-IE034/CD034A-User1 GRN1 after 60sec\");",
															"}else{",
															"    postman.setNextRequest(\"POST-Request-IE034/CD034A-User1 GRN2\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.response.to.not.have.status(429);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"response\");",
															"    pm.expect(responseJson.response).to.be.an(\"object\");",
															"    pm.expect(responseJson.response).to.have.property(\"balance\");",
															"    console.log(\"The balance of guaranteeref1 is: \" +responseJson.response.balance);",
															"    pm.expect(responseJson.response.balance).to.be.a(\"number\");",
															"    pm.expect(responseJson.response).to.have.property(\"currency\");",
															"    pm.expect(responseJson.response.currency).to.be.a(\"string\");",
															"",
															"    let guaranteeref1 = pm.collectionVariables.get(\"guaranteeReference\");",
															"    console.log(\"GuaranteeRef1 is: \" +guaranteeref1);",
															"    //pm.expect(var1).to.be.equals(var2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-Request-IE034/CD034A-User1 GRN2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let requests = pm.collectionVariables.get(\"requests\");",
															"",
															"if(!requests || requests.length == 0) {",
															"    requests = [{",
															"\t\"taxIdentifier\": \"GB5678456123C\",",
															"\t\"guaranteeReference\": \"GB5678456123CBBVVFF\",",
															"\t\"accessCode\": \"1234\"",
															"}",
															"]",
															"}",
															"",
															"let bearer1 = pm.collectionVariables.get(\"bearerToken\");",
															"console.log(\"The bearer token1 is:\" +bearer1);",
															"",
															"var nextrequest = requests.shift();",
															"pm.collectionVariables.set(\"taxIdentifier\",nextrequest.taxIdentifier);",
															"pm.collectionVariables.set(\"guaranteeReference\",nextrequest.guaranteeReference);",
															"pm.collectionVariables.set(\"accessCode\",nextrequest.accessCode);",
															"pm.collectionVariables.set(\"requests\",requests);",
															"",
															"if(requests && requests.length > 0){",
															"    postman.setNextRequest(\"POST-Request-IE034/CD034A-User1 GRN2\");",
															"}else{",
															"    postman.setNextRequest(\"POST-Auth Login API Bearer Token2\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"response\");",
															"    pm.expect(responseJson.response).to.be.an(\"object\");",
															"    pm.expect(responseJson.response).to.have.property(\"balance\");",
															"    pm.expect(responseJson.response.balance).to.be.a(\"number\");",
															"    pm.expect(responseJson.response).to.have.property(\"currency\");",
															"    pm.expect(responseJson.response.currency).to.be.a(\"string\");",
															"});",
															"",
															"//setTimeout(function(){}, 60000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-Auth Login API Bearer Token2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201 CREATED\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Response contains JSON\", function () {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response Authorization header contains bearer token\", function () {",
															"    pm.expect(pm.response.headers.has('Authorization'));",
															"    const tokenHeaderText = pm.response.headers.get('Authorization');",
															"    pm.expect(tokenHeaderText).to.contain(\"Bearer \");",
															"    const tokenText = tokenHeaderText.replace(\"Bearer \", \"\");",
															"    pm.collectionVariables.set(\"bearerToken\", tokenText);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"bearerToken\", \"\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"affinityGroup\": \"Individual\",\n    \"credentialStrength\": \"weak\",\n    \"confidenceLevel\": 50,\n    \"credId\": \"{{$randomAlphaNumeric}}\",\n    \"enrolments\": []\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{authLoginApiBaseUrl}}/government-gateway/session/login",
													"host": [
														"{{authLoginApiBaseUrl}}"
													],
													"path": [
														"government-gateway",
														"session",
														"login"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-Request-IE034/CD034A-User2 GRN1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Before running this request run the Bearer Token request to create a new user/token.",
															"// Also, as a pre-requisite before running this request make sure that the request 'POST - Request-IE034/CD034A-User1 GRN1' should run from the 'TC01-Rate Limiting-Happy/Unhappy Path' folder - to use the same GuaranteeRef.",
															"",
															"let requests = pm.collectionVariables.get(\"requests\");",
															"",
															"if(!requests || requests.length == 0) {",
															"    requests = [{",
															"\t\"taxIdentifier\": \"GB5678456123C\",",
															"\t\"guaranteeReference\": \"GB5678456123CBB\",",
															"\t\"accessCode\": \"1234\"",
															"}",
															"]",
															"}",
															"",
															"let bearer2 = pm.collectionVariables.get(\"bearerToken\");",
															"console.log(\"The bearer token2 is: \" +bearer2);",
															"",
															"var nextrequest = requests.shift();",
															"pm.collectionVariables.set(\"taxIdentifier\",nextrequest.taxIdentifier);",
															"pm.collectionVariables.set(\"guaranteeReference\",nextrequest.guaranteeReference);",
															"pm.collectionVariables.set(\"accessCode\",nextrequest.accessCode);",
															"pm.collectionVariables.set(\"requests\",requests);",
															"",
															"if(requests && requests.length > 0){",
															"    postman.setNextRequest(\"POST-Request-IE034/CD034A-User2 GRN1\");",
															"}else{",
															"    postman.setNextRequest(\"POST-Request-IE034/CD034A-User2 GRN2\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"response\");",
															"    pm.expect(responseJson.response).to.be.an(\"object\");",
															"    pm.expect(responseJson.response).to.have.property(\"balance\");",
															"    console.log(\"The balance of guaranteeref1 is: \" +responseJson.response.balance);",
															"    pm.expect(responseJson.response.balance).to.be.a(\"number\");",
															"    pm.expect(responseJson.response).to.have.property(\"currency\");",
															"    pm.expect(responseJson.response.currency).to.be.a(\"string\");",
															"",
															"    let guaranteeref1 = pm.collectionVariables.get(\"guaranteeReference\");",
															"    console.log(\"GuaranteeRef1 is: \" +guaranteeref1);",
															"    //pm.expect(var1).to.be.equals(var2);",
															"});",
															"",
															"//setTimeout(function(){}, 60000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "POST-Request-IE034/CD034A-User2 GRN2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//Before running this request run the Bearer Token request to create a new user/token.",
															"",
															"let requests = pm.collectionVariables.get(\"requests\");",
															"",
															"if(!requests || requests.length == 0) {",
															"    requests = [{",
															"\t\"taxIdentifier\": \"GB5678456123C\",",
															"\t\"guaranteeReference\": \"GB5678456123CBB111\",",
															"\t\"accessCode\": \"1234\"",
															"}",
															"]",
															"}",
															"",
															"let bearer2 = pm.collectionVariables.get(\"bearerToken\");",
															"console.log(\"The bearer token2 is: \" +bearer2);",
															"",
															"var nextrequest = requests.shift();",
															"pm.collectionVariables.set(\"taxIdentifier\",nextrequest.taxIdentifier);",
															"pm.collectionVariables.set(\"guaranteeReference\",nextrequest.guaranteeReference);",
															"pm.collectionVariables.set(\"accessCode\",nextrequest.accessCode);",
															"pm.collectionVariables.set(\"requests\",requests);",
															"",
															"if(requests && requests.length > 0){",
															"    postman.setNextRequest(\"POST-Request-IE034/CD034A-User2 GRN2\");",
															"}else{",
															"    postman.setNextRequest(null);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200 OK\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is JSON\", function() {",
															"    pm.expect(pm.response.to.have.jsonBody());",
															"});",
															"",
															"pm.test(\"Response body contains balance\", function () {",
															"    const responseJson = pm.response.json();",
															"    pm.expect(responseJson).to.be.an(\"object\");",
															"    pm.expect(responseJson).to.have.property(\"response\");",
															"    pm.expect(responseJson.response).to.be.an(\"object\");",
															"    pm.expect(responseJson.response).to.have.property(\"balance\");",
															"    console.log(\"The balance of guaranteeref2 is: \" +responseJson.response.balance);",
															"    pm.expect(responseJson.response.balance).to.be.a(\"number\");",
															"    pm.expect(responseJson.response).to.have.property(\"currency\");",
															"    pm.expect(responseJson.response.currency).to.be.a(\"string\");",
															"",
															"    let guaranteeref2 = pm.collectionVariables.get(\"guaranteeReference\");",
															"    console.log(\"GuaranteeRef2 is: \" +guaranteeref2);",
															"    //pm.expect(var1).to.be.equals(var2);",
															"});",
															"",
															"//setTimeout(function(){}, 60000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.hmrc.1.0+json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"taxIdentifier\": \"{{taxIdentifier}}\",\n    \"guaranteeReference\": \"{{guaranteeReference}}\",\n    \"accessCode\": \"{{accessCode}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiBaseUrl}}/balances",
													"host": [
														"{{apiBaseUrl}}"
													],
													"path": [
														"balances"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearerToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "02_CTC_GB_Development Environment",
			"item": []
		},
		{
			"name": "03_CTC_GB_QA Environment",
			"item": []
		},
		{
			"name": "04_CTC_GB_Staging Environment",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "bearerToken",
			"value": ""
		},
		{
			"key": "taxIdentifier",
			"value": ""
		},
		{
			"key": "guaranteeReference",
			"value": ""
		},
		{
			"key": "balanceId",
			"value": ""
		},
		{
			"key": "accessCode",
			"value": ""
		},
		{
			"key": "requests",
			"value": ""
		}
	]
}